AWSTemplateFormatVersion: "2010-09-09"
Description: Setup AWS Demo for Shadow Reader
Parameters:
  vpcid:
    Description: VPCId for ShadowReader Live Replay demo
    Type: AWS::EC2::VPC::Id
  subnet1:
    Description: Subnet 1 for ShadowReader Live Replay demo
    Type: AWS::EC2::Subnet::Id
  subnet2:
    Description: Subnet 2 for ShadowReader Live Replay demo
    Type: AWS::EC2::Subnet::Id

Mappings:
  ALBS3AccessAccountID:
    us-east-1:
      Id: "127311923021"
    us-east-2:
      Id: "033677994240"
    us-west-1:
      Id: "027434742980"
    us-west-2:
      Id: "797873946194"
    ca-central-1:
      Id: "985666609251"
    eu-central-1:
      Id: "054676820928"
    eu-west-1:
      Id: "156460612806"
    eu-west-2:
      Id: "652711504416"
    eu-west-3:
      Id: "009996457667"
    ap-northeast-1:
      Id: "582318560864"
    ap-northeast-2:
      Id: "600734575887"
    ap-northeast-3:
      Id: "383597477331"
    ap-southeast-1:
      Id: "114774131450"
    ap-southeast-2:
      Id: "783225319266"
    ap-south-1:
      Id: "718504428378"
    sa-east-1:
      Id: "507241528517"
    us-gov-west-1:
      Id: "048591011584"
    cn-north-1:
      Id: "638102146993"
    cn-northwest-1:
      Id: "037604701340"

Resources:
  AccessLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ '-', [ 'sr-access-logs', !Ref 'AWS::Region', !Ref 'AWS::AccountId'] ]
  SampleBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - AccessLogBucket
    Properties:
      Bucket: !Ref AccessLogBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:PutObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                -
                  - "arn:aws:s3:::"
                  - !Ref "AccessLogBucket"
                  - "/*"
            Principal: {"AWS": !FindInMap [ALBS3AccessAccountID, !Ref 'AWS::Region', Id]}


  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref vpcid
      SecurityGroupEgress:
        - FromPort: "80"
          ToPort: "80"
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - FromPort: "-1"
          ToPort: "-1"
          IpProtocol: icmp
          CidrIp: 0.0.0.0/0
        - FromPort: "80"
          ToPort: "80"
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      GroupDescription: ShadowReader-demo-sg

  SRDemoALBReceiving:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: SR-Demo-ALB-receiving
      Scheme: internet-facing
      Subnets: [ !Ref subnet1, !Ref subnet2 ]
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Value: SR-Demo-ALB-receiving
          Key: Name

  SRDemoALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "Replay me!"
            StatusCode: "200"
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref SRDemoALBReceiving


  SRDemoALBLogs:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: SR-Demo-ALB-log-generator
      Scheme: internet-facing
      Subnets: [ !Ref subnet1, !Ref subnet2 ]
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Value: SR-Demo-ALB-log-generator
          Key: Name
      LoadBalancerAttributes:
      - Key: access_logs.s3.enabled
        Value: true
      - Key: access_logs.s3.bucket
        Value: !Ref AccessLogBucket

  SRDemoALBListenerLogs:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            MessageBody: "Replay me!"
            StatusCode: "200"
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref SRDemoALBLogs
